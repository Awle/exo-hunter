# -*- coding: utf-8 -*-
"""rnn_formatter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aFROxDnWPUpaSqZa0skdeLLFxf_JDPt2
"""

from pyts.preprocessing import InterpolationImputer
from sklearn.preprocessing import Normalizer, StandardScaler
from scipy.signal import savgol_filter, butter, filtfilt
import numpy as np
import pandas as pd

class RNNFormatter():
    # This class takes data and processes it before putting it into a RNN model.

    def __init__(self):
        pass


    def get_Xy(self, data):
        # create a X and y variable
        X = data.drop(columns=['LABEL'])
        y = data['LABEL'].map({1:0, 2:1})
        return X, y


    def impute(self, data, missing_value= np.nan, strategy= 'linear'):
        # Fills in the nulls/nan's
        imputer = InterpolationImputer(missing_value, strategy)
        return imputer.transform(data - data.mean().mean())


    def butter_filt(self, data, n_order=5, cutoff_frac=0.3):
        # Helps make wave lengths smoother
        b, a = butter(n_order, cutoff_frac, btype='lowpass')
        data_filtered = filtfilt(b, a, data)
        return pd.DataFrame(data_filtered)


    def savgol_filter(self, data):
        # Help smooth the data
        savgol = savgol_filter(data, window_length=19, polyorder=11)
        return savgol


    def fourier_transform(self, data):
        # Make the values into the absolute of FFT
        df_fft = np.abs(np.fft.fft(data, axis=1))
        return df_fft


    def scaler(self,train_data):
        # Scales the data
        std = StandardScaler()
        scale = std.fit_transform(train_data)
        return scale


    def normalize(self, train_data):
        # Normalizes the data
        norm = Normalizer()
        data = norm.fit_transform(train_data)
        return data


    def add_1_to_x_shape(self, x):
        expand = np.expand_dims(x, 2)
        return expand


    def process_data(self, data):
        # Runs the above functions and processes the data
        processed, y = self.get_Xy(data)
        processed = self.impute(processed)
        processed = self.butter_filt(processed)
        processed = self.savgol_filter(processed)
        processed = self.fourier_transform(processed)
        processed = self.scaler(processed)
        processed = self.normalize(processed)
        processed = self.add_1_to_x_shape(processed)
        return processed, y
